{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","image","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAqB9C,OACI,0BAAMC,SAdW,SAAEC,GAEnBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAe,SAAAS,GAAQ,OAAMP,GAAN,mBAAqBO,OAE5CN,EAAc,OAQb,2BACIO,KAAK,OACLC,MAAQT,EACRU,SAtBc,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,Y,uBCNlBG,EAAO,uCAAG,WAAOL,GAAP,uBAAAM,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUR,GAF9C,+DAGAS,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAcZM,GAdY,4CAAH,sDCAPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAItC,OACI,yBAAKc,UAAU,0CACX,2BAAKJ,GACL,yBAAKK,IAAMf,EAAMgB,IAAMN,MCHtBO,EAAU,SAAC,GAAkB,IAAhBxB,EAAe,EAAfA,SAAe,ECHb,SAAEA,GAAe,IAAD,EAEdR,mBAAS,CAC/BoB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KA2BxC,OApBAC,qBAAW,WACPvB,EAASL,GACR6B,MAAM,SAAAd,GACCY,EACI,CACIf,KAAMG,EACNU,SAAS,SAI1B,CAAEzB,IAUE0B,EDrBmBI,CAAc9B,GAAhCyB,EAH6B,EAG7BA,QAASb,EAHoB,EAGpBA,KAKjB,OACI,oCACI,4BAAKZ,GACHyB,GAAW,sCACb,yBAAKJ,UAAU,aAGPT,EAAKE,KAAI,SAAAiB,GAAK,OACV,kBAAC,EAAD,eACIC,IAAKD,EAAMf,IACPe,UEejBE,EAjCM,WAAM,MAGazC,mBAAS,CAAC,KAHvB,mBAGhB0C,EAHgB,KAGJ3C,EAHI,KAWvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEI2C,EAAWpB,KAAK,SAACd,GAAD,OAEZ,kBAAC,EAAD,CACIA,SAAWA,EACXgC,IAAMhC,UCtB9BmC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.f4119617.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n    // Si queremos que el estado sea un string vacío hay que especificarlo, sino nos tira un error en consola.\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = ( e ) => {\r\n        // Prevenimos el comportamiento por default\r\n        e.preventDefault();\r\n\r\n        if ( inputValue.trim().length > 2 ) {\r\n           setCategories( category => [ inputValue, ...category ] );\r\n        //    Este último sirve para que se borre el valor del input\r\n           setInputValue(''); \r\n        }\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit= { handleSubmit }>  \r\n            <input \r\n                type=\"text\"\r\n                value= {inputValue}\r\n                onChange={ handleInputChange } \r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n\r\n    setCategories: PropTypes.func.isRequired\r\n\r\n}","\r\n\r\nexport const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=gNUKDWyWtsAM17BLTZMMK2NIQ7WBa7aF`\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    } )\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n\r\n    // console.log( id )\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <p>{ title }</p>\r\n            <img src={ url } alt={ title }/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\n\r\n\r\nexport const GifGrid = ( {category} ) => {\r\n\r\n    // const [images, setImages] = useState([])\r\n    const { loading, data } = useFetchGifs( category );\r\n\r\n\r\n    // getGifs(); Si lo hacemos así, sin el useEffect hace que cambie el estado y vuelve a hacer todo infinitamente\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            { loading && <p>loading</p> }\r\n            <div className='card-grid'>\r\n                {\r\n                    // el map sin las llaves y con los paréntesis es un return implícito\r\n                    data.map(image => (\r\n                        <GifGridItem\r\n                            key={image.id}\r\n                            {...image}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( (  ) => {\r\n        getGifs( category )\r\n        .then( img => { \r\n                setstate( \r\n                    {\r\n                        data: img,\r\n                        loading: false\r\n                    }\r\n                 )\r\n        })\r\n    }, [ category ])\r\n    // Ese arreglo del useEffect es el equivalente al componentDidMount.\r\n\r\n    // setTimeout(() => {\r\n    //     setstate({\r\n    //         data: [ 1, 2, 3, 4,],\r\n    //         loading: false\r\n    //     })\r\n    // }, 3000)\r\n\r\n    return state;\r\n\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    // const categories= ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['']);\r\n\r\n    // const handleAdd = () => {\r\n        // setCategories([...categories,'Hunter']);\r\n        // también se puede hacer de la siguiente forma, que es usando un call back al que se le pasa de argumento el estado anterior, que necesariamente tiene que tener el mismo nombre\r\n        // setCategories( category => [...category, 'lo que sea'] )\r\n    // }\r\n\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr />\r\n\r\n            <ol>\r\n            {\r\n                categories.map( (category) => (\r\n                    // ESto de poner así la key no va, se usa los ids que te dan las bases de datos, no poner el índice del map porque puede generar problemas si el arreglo cambia.\r\n                    <GifGrid\r\n                        category={ category }\r\n                        key={ category }     \r\n                    />\r\n                ) )\r\n            }\r\n            </ol>\r\n        </>\r\n    )\r\n\r\n};\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}